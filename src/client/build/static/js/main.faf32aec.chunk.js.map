{"version":3,"sources":["components/Home/Header/Header.jsx","components/Home/Body/Body.jsx","components/Home/Footer/Footer.jsx","components/Home/Home.jsx","components/Home/HomeInChinese.jsx","components/Search/Search.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","this","props","language","src","Button","variant","React","Body","nextPath","path","history","push","type","placeholder","to","Footer","Home","HomeInChinese","Search","App","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uaAQaA,EAAb,iLAEI,OACI,0BAAQC,UAAU,kBACd,yBAC0B,MAAvBC,KAAKC,MAAMC,SAAmB,sBACP,MAAvBF,KAAKC,MAAMC,SAAmB,2BAAQ,IAEzC,uBAAKH,UAAU,sBAAsBI,IAAI,2BACzC,gBAACC,EAAA,EAAD,CAAQL,UAAU,eAAeM,QAAQ,WACf,MAAvBL,KAAKC,MAAMC,SAAmB,UACP,MAAvBF,KAAKC,MAAMC,SAAmB,qBAAQ,SAXrD,GAA4BI,aCAfC,G,MAAb,2MAEEC,SAAW,SAACC,GACV,EAAKR,MAAMS,QAAQC,KAAKF,IAH5B,wEAOI,OACI,uBAAKV,UAAU,QACb,uBAAKA,UAAU,YACb,uBAAKI,IAA4B,MAAvBH,KAAKC,MAAMC,SAAmB,iCACP,MAAvBF,KAAKC,MAAMC,SAAmB,gCAAkC,MAE5E,uBAAKH,UAAU,iBACb,yBAAOa,KAAK,OACLC,YAAoC,MAAvBb,KAAKC,MAAMC,SAAmB,0CACP,MAAvBF,KAAKC,MAAMC,SAAmB,iFAAkB,MAEtE,uBAAKH,UAAU,eACb,gBAAC,IAAD,CAAMA,UAAU,MAAMe,GAAG,WACC,MAAvBd,KAAKC,MAAMC,SAAmB,iBACP,MAAvBF,KAAKC,MAAMC,SAAmB,qEAAgB,IAEzB,MAAvBF,KAAKC,MAAMC,UACV,gBAAC,IAAD,CAAMH,UAAU,OAAhB,4BAxBd,GAA0BO,cCEbS,G,MAAb,iLAEI,OACI,uBAAKhB,UAAU,UACb,uBAAKA,UAAU,QACX,yBAC2B,OAAxBC,KAAKC,MAAMC,SAAoB,uCACP,OAAxBF,KAAKC,MAAMC,SAAoB,mBAAkB,IAEpD,gBAAC,IAAD,CAAMH,UAAU,YAAYe,GAA4B,OAAxBd,KAAKC,MAAMC,SAAoB,MAAgC,OAAxBF,KAAKC,MAAMC,SAAoB,IAAM,IACjF,OAAxBF,KAAKC,MAAMC,SAAoB,eACR,OAAxBF,KAAKC,MAAMC,SAAoB,UAAY,UAX3D,GAA4BI,cCFfU,EAAb,iLAEQ,OACI,uBAAKjB,UAAU,OACX,gBAAC,EAAD,CAAQA,UAAU,SAASG,SAAS,OACpC,gBAAC,EAAD,CAAMH,UAAU,OAAOG,SAAS,OAChC,gBAAC,EAAD,CAAQH,UAAU,SAASG,SAAS,YANpD,GAA0BI,aCAbW,EAAb,iLAEQ,OACI,uBAAKlB,UAAU,OACX,gBAAC,EAAD,CAAQA,UAAU,SAASG,SAAS,OACpC,gBAAC,EAAD,CAAMH,UAAU,OAAOG,SAAS,OAChC,gBAAC,EAAD,CAAQH,UAAU,SAASG,SAAS,YANpD,GAAmCI,aCHtBY,G,MAAb,iLAEI,OACI,0BAAQnB,UAAU,kBACd,gDACA,uBAAKA,UAAU,sBAAsBI,IAAI,2BACzC,gBAACC,EAAA,EAAD,CAAQL,UAAU,gBAAlB,gBANZ,GAA4BO,cC2Bba,MAlBf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACX,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,WACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,OACV,kBAAC,EAAD,UCbUY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.faf32aec.chunk.js","sourcesContent":["import './Header.css'\n\nimport * as React from \"react\";\nimport { Button } from 'react-bootstrap';\n\ntype HeaderProps = {\n  language: string,\n}\nexport class Header extends React.Component<HeaderProps> {\n  render() {\n    return (\n        <header className=\"homepageHeader\">\n            <p>\n              {this.props.language == 'EN' ? 'Learn More About Me':\n               this.props.language == 'CN' ? '‰∫ÜËß£Êõ¥Â§ö': ''}\n            </p>\n            <img className=\"headerMenuButtonImg\" src='/images/menubutton.png'/>\n            <Button className=\"headerButton\" variant=\"primary\">\n              {this.props.language == 'EN' ? 'Contact': \n               this.props.language == 'CN' ? 'ËÅîÁ≥ªÊàë' : ''}\n            </Button>\n        </header>\n    );\n  }\n}","import './Body.css'\nimport * as React from \"react\";\nimport { Link } from \"react-router-dom\";\n\ntype BodyProps = {\n  language: string,\n}\n\nexport class Body extends React.Component<BodyProps> {\n\n  nextPath = (path) => {\n    this.props.history.push(path);\n  }\n\n  render() {\n    return (\n        <div className=\"body\">\n          <div className=\"homeLogo\" >\n            <img src={this.props.language == 'EN' ? '/images/canzhenzhou_google.png' : \n                      this.props.language == 'CN' ? '/images/canzhenzhou_baidu.png' : ''} />\n          </div>\n          <div className=\"homeSearchBar\">\n            <input type=\"text\" \n                   placeholder={this.props.language == 'EN' ? \"What do you want to know about Canzhen?\" : \n                                this.props.language == 'CN' ? \"‰Ω†ÊÉ≥‰∫ÜËß£ÂÖ≥‰∫éÁÅøÊ°¢ÁöÑ‰ªÄ‰πàÂëÄÔºü\" : \"\"}></input>\n          </div>\n          <div className=\"buttonGroup\">\n            <Link className=\"btn\" to=\"/search\">\n              {this.props.language == 'EN' ? \"Canzhen Search\" : \n               this.props.language == 'CN' ? \"ÁÅøÊ°¢‰∏Ä‰∏ãÔºå‰Ω†Â∞±Áü•ÈÅìüòÅ\" : \"\"}\n            </Link>\n            {this.props.language == 'EN' && (\n              <Link className=\"btn\">I am Feeling Lucky</Link>\n            )}\n          </div>\n        </div>\n    );\n  }\n}","import './Footer.css'\n\nimport * as React from \"react\";\nimport { Link } from \"react-router-dom\";\n\n\ntype FooterProps = {\n  language: string,\n}\n\nexport class Footer extends React.Component<FooterProps> {\n  render() {\n    return (\n        <div className=\"footer\">\n          <div className=\"fbar\">\n              <p>\n                {this.props.language === 'EN' ? '@Copyright: Canzhen Zhou since 2020.' : \n                 this.props.language === 'CN' ? '¬©2020 Canzhen' : '' }\n              </p>\n              <Link className=\"fbarRight\" to={this.props.language === 'EN' ? '/cn' : this.props.language === 'CN' ? '/' : ''}>\n                {this.props.language === 'EN' ? '‰∏≠Êñá' : \n                this.props.language === 'CN' ? 'English' : ''}\n              </Link>\n          </div>\n        </div>\n    );\n  }\n}\n","import './Home.css'\n\nimport * as React from \"react\";\n\nimport { Header } from \"./Header/Header\"\nimport { Body } from \"./Body/Body\"\nimport { Footer } from \"./Footer/Footer\"\n\nexport class Home extends React.Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <Header className=\"Header\" language=\"EN\"></Header>\n                <Body className=\"Body\" language=\"EN\"></Body>\n                <Footer className=\"Footer\" language=\"EN\"></Footer>\n            </div>\n        )\n    };\n}","import './Home.css'\n\nimport * as React from \"react\";\n\nimport { Header } from \"./Header/Header\"\nimport { Body } from \"./Body/Body\"\nimport { Footer } from \"./Footer/Footer\"\n\nexport class HomeInChinese extends React.Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <Header className=\"Header\" language=\"CN\"></Header>\n                <Body className=\"Body\" language=\"CN\"></Body>\n                <Footer className=\"Footer\" language=\"CN\"></Footer>\n            </div>\n        )\n    };\n}","import './Search.css'\n\nimport * as React from \"react\";\nimport { Button } from 'react-bootstrap';\n\nexport class Search extends React.Component {\n  render() {\n    return (\n        <header className=\"homepageHeader\">\n            <p>Learn More About Me</p>\n            <img className=\"headerMenuButtonImg\" src='/images/menubutton.png'/>\n            <Button className=\"headerButton\">Contact</Button>\n        </header>\n    );\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nimport { Home } from './components/Home/Home';\nimport { HomeInChinese } from './components/Home/HomeInChinese'\nimport { Search } from './components/Search/Search';\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\">\n          <Home/>\n        </Route>\n        <Route path=\"/search\">\n          <Search/>\n        </Route>\n        <Route path=\"/cn\">\n          <HomeInChinese/>\n        </Route>\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}